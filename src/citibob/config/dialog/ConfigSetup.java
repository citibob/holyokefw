/*
OffstageArts: Enterprise Database for Arts Organizations
This file Copyright (c) 2005-2008 by Robert Fischer

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * ConfigChooser.java
 *
 * Created on February 17, 2008, 10:42 PM
 */

package citibob.config.dialog;

import citibob.swing.prefs.SwingPrefs;
import citibob.swing.typed.SwingerMap;
import citibob.text.StringSFormat;
import citibob.version.Version;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.Writer;
import java.net.URL;
import java.util.prefs.Preferences;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 
 @author  citibob
 */
public class ConfigSetup extends javax.swing.JDialog
{
	ConfigModel model;
	String configResourcePrefix = "offstage/defaultconfig/";

	/** Creates new form ConfigChooserPanel */
	public ConfigSetup(ConfigModel model, SwingerMap smap, SwingPrefs swingPrefs, Preferences userRoot, String version)
	{
		super((JFrame)null, true);
		this.model = model;
		setTitle("Setup --- OffstageArts " + version.toString());
		
		initComponents();
		configs.setHighlightMouseover(false);
//		model = new ConfigModel(prefs);
		configs.setModelU(model,
			null, null, new boolean[] {false,true},
			smap);
//		configs.setValueColU("Folder");

//		tfName.setJType(String.class, new StringSFormat());
		
		swingPrefs.setPrefs(this, userRoot.node("ConfigSetup"));
	
	}
	
	public File getFile() { return (File)configs.getValue(); }

// --------------------------------------------------------------	
	void copyTextFile(URL url, File dest) throws IOException
	{
		Writer out = new FileWriter(dest);
		char[] cbuf = new char[8192];
		Reader in = new InputStreamReader(url.openStream());
		for (;;) {
			int n = in.read(cbuf);
			if (n <= 0) break;
			out.write(cbuf, 0, n);
		}
		out.close();
	}
	
	void copyResource(File dir, String name) throws IOException
	{
		ClassLoader cl = getClass().getClassLoader();
		URL url = cl.getResource(configResourcePrefix + name);
		copyTextFile(url, new File(dir, name));
	}
	
	public void newConfig(String name, File dir) throws IOException
	{
		dir.mkdirs();
		copyResource(dir, "app.properties");
		copyResource(dir, "Mac.properties");
		copyResource(dir, "Windows.properties");
		copyResource(dir, "Linux.properties");
	}
// --------------------------------------------------------------	
	/** This method is called from within the constructor to
	 initialize the form.
	 WARNING: Do NOT modify this code. The content of this method is
	 always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        configs = new citibob.swing.typed.JTypedSelectTable();
        jPanel1 = new javax.swing.JPanel();
        bEdit = new javax.swing.JButton();
        bAdd = new javax.swing.JButton();
        bDel = new javax.swing.JButton();
        bOK = new javax.swing.JButton();
        bNew = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        configs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        configs.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                configsPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(configs);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        bEdit.setText("Edit");
        bEdit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bEditActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(bEdit, gridBagConstraints);

        bAdd.setText("Add Existing");
        bAdd.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(bAdd, gridBagConstraints);

        bDel.setText("Del");
        bDel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bDelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(bDel, gridBagConstraints);

        bOK.setText("OK");
        bOK.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bOKActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 2);
        jPanel1.add(bOK, gridBagConstraints);

        bNew.setText("New");
        bNew.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bNewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(bNew, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void configsPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_configsPropertyChange
	{//GEN-HEADEREND:event_configsPropertyChange
		// TODO add your handling code here:
	}//GEN-LAST:event_configsPropertyChange

	private void bAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bAddActionPerformed
	{//GEN-HEADEREND:event_bAddActionPerformed
		NewConfigDialog dialog = new NewConfigDialog(null, "Add Existing Configuration", null, null);
		dialog.setVisible(true);
		if (!dialog.isOKPressed()) return;
		
		model.addRow(dialog.getConfigName(), dialog.getDir());
		//		model.addRow((String)tfName.getValue());
		// TODO add your handling code here:
}//GEN-LAST:event_bAddActionPerformed

	private void bDelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bDelActionPerformed
	{//GEN-HEADEREND:event_bDelActionPerformed
		model.delRow(configs.getSelectedRow());
		// TODO add your handling code here:
}//GEN-LAST:event_bDelActionPerformed

	private void bOKActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bOKActionPerformed
	{//GEN-HEADEREND:event_bOKActionPerformed
		setVisible(false);
		// TODO add your handling code here:
}//GEN-LAST:event_bOKActionPerformed

	private void bEditActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bEditActionPerformed
	{//GEN-HEADEREND:event_bEditActionPerformed
		try {
			int row = configs.getSelectedRow();
			EditConfigDialog dia = new EditConfigDialog(this);
			dia.loadConfig((String)configs.getValue("Name"),
				(File)configs.getValue("Folder"));
	//			WidgetTree.getJFrame(this), true);
			dia.setVisible(true);
			if (dia.okPressed) {
				model.setValueAt(dia.getName(), row, "Name");
			}
		} catch(IOException e) {
			JOptionPane.showMessageDialog(this,
				"Cannot load configuration for edit!");
			e.printStackTrace();
		}
		
		// TODO add your handling code here:
}//GEN-LAST:event_bEditActionPerformed

	private void bNewActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bNewActionPerformed
	{//GEN-HEADEREND:event_bNewActionPerformed
		try {
			NewConfigDialog dialog = new NewConfigDialog(null, "Add Existing Configuration", null, null);
			dialog.setVisible(true);
			if (!dialog.isOKPressed()) return;

			String name = dialog.getConfigName();
			File dir = dialog.getDir();

			newConfig(name, dir);
			model.addRow(name, dir);

			// Now edit it!
			EditConfigDialog dia = new EditConfigDialog(this);
			dia.loadConfig(name, dir);
			dia.setVisible(true);
		} catch(IOException e) {
			JOptionPane.showMessageDialog(this,
				"Cannot load configuration for edit!");
			e.printStackTrace();
		}

}//GEN-LAST:event_bNewActionPerformed

	

	
//	/**
//	 @param args the command line arguments
//	 */
//	public static void main(String args[])
//	{
//		java.awt.EventQueue.invokeLater(new Runnable()
//		{
//			public void run()
//			{
//				ConfigChooser dialog = new ConfigChooser(new javax.swing.JFrame(), true);
//				dialog.addWindowListener(new java.awt.event.WindowAdapter()
//				{
//					public void windowClosing(java.awt.event.WindowEvent e)
//					{
//						System.exit(0);
//					}
//				});
//				dialog.setVisible(true);
//			}
//		});
//	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAdd;
    private javax.swing.JButton bDel;
    private javax.swing.JButton bEdit;
    private javax.swing.JButton bNew;
    private javax.swing.JButton bOK;
    private citibob.swing.typed.JTypedSelectTable configs;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
//public static void main(String[] args)
//{
//	Preferences prefs = Preferences.userRoot().node("offstage").node("config");
//	ConfigChooser dialog = new ConfigChooser(prefs, new JavaSwingerMap(TimeZone.getDefault()));
//	dialog.setVisible(true);
//	System.out.println(dialog.getFile());
//
//}
}
