/*
Holyoke Framework: library for GUI-based database applications
This file Copyright (c) 2006-2008 by Robert Fischer

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * ThreadConsoleGui.java
 *
 */

package citibob.gui;

import java.io.*;
import javax.swing.*;
import citibob.swing.prefs.*;
import javax.swing.text.*;
import javax.swing.table.*;
import java.util.prefs.*;
import gnu.xml.dom.ls.WriterOutputStream;
import foundry.io.DocumentWriter;
import javax.swing.event.*;
import citibob.swing.text.*;
import citibob.swing.text.CircularPlainDocument;

/**
 * Offers an entire GUI console window for text-based applications.
 */
public class ConsoleFrame extends javax.swing.JFrame {

	/**
	 * Creates new form ThreadConsoleGui 
	 */
	public ConsoleFrame() {
		initComponents();
		this.setTitle("Java Console");
		logText.setLineWrap(true);
		logText.setWrapStyleWord(true);
		logText.setEditable(false);
//		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
	}
	
//Thread thread;
DocumentWriter logWriter;
Document doc;

public Document getDocument() { return doc; }

public void initRuntime(String title, SwingPrefs swingPrefs, String guiNodePath)
{
	Preferences guiPrefs = Preferences.userRoot();
	guiPrefs = guiPrefs.node(guiNodePath);
	initRuntime(title, swingPrefs, guiPrefs);
}
public void initRuntime(String title, SwingPrefs swingPrefs, Preferences guiPrefs)
{
	setTitle(title);
	doc = new CircularPlainDocument(20000);
	logWriter = new DocumentWriter(doc);

	// Set up log window
	logText.setDocument(doc);
	OutputStream tee = new citibob.io.TeeOutputStream(
		new OutputStream[] {System.out, new WriterOutputStream(logWriter) });
	System.setOut(new PrintStream(tee));
// This actually DISPLAYS the stuff in the window...
	doc.addDocumentListener(new DocumentListener() {
		public void changedUpdate(DocumentEvent e) {} 
		public void removeUpdate(DocumentEvent e) {}
		public void insertUpdate(DocumentEvent e) {
			final JScrollBar sb = logScrollPane.getVerticalScrollBar();
			java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				sb.setValue(sb.getMaximum());
			}});
		}
	});
	
	
	// Save GUI Preferences preferences
	swingPrefs.setPrefs(this, guiPrefs);

}
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        logScrollPane = new javax.swing.JScrollPane();
        logText = new javax.swing.JTextArea();
        jToolBar1 = new javax.swing.JToolBar();
        bClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("OmniFX Quote Server");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        logScrollPane.setViewportView(logText);

        getContentPane().add(logScrollPane, java.awt.BorderLayout.CENTER);

        bClear.setText("Clear");
        bClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bClearActionPerformed(evt);
            }
        });

        jToolBar1.add(bClear);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

	private void bClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bClearActionPerformed
// TODO add your handling code here:
//		doc.clear();
//		logText.setText("");
		try {
			doc.remove(0, doc.getLength());
		} catch(BadLocationException e) {
			e.printStackTrace();	// Shouldn't happen
		}

	}//GEN-LAST:event_bClearActionPerformed

	private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		setVisible(false);
	}//GEN-LAST:event_formWindowClosing

	private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

	}//GEN-LAST:event_formWindowClosed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bClear;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JTextArea logText;
    // End of variables declaration//GEN-END:variables
	
}
